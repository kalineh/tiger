
global StageConfig =
{
    Highway =
    {
        // replaced with spawner
        /*
        // debug
        { time = 0, type = "SpawnCar", args = { type = 0, lane = 0 } },
        { time = 46, type = "SpawnCar", args = { type = 1, lane = 1 } },
        { time = 12, type = "SpawnCar", args = { type = 0, lane = 2 } },
        { time = 0, type = "SpawnCar", args = { type = 1, lane = 3 } },
        { time = 20, type = "SpawnCar", args = { type = 0, lane = 0 } },
        { time = 15, type = "SpawnCar", args = { type = 1, lane = 1 } },
        { time = 8, type = "SpawnCar", args = { type = 0, lane = 2 } },
        { time = 0, type = "SpawnCar", args = { type = 1, lane = 3 } },
        // real
        { time = 0, type = "SpawnCar", args = { type = 0, lane = 0 } },
        { time = 0, type = "SpawnCar", args = { type = 1, lane = 1 } },
        { time = 20, type = "SpawnCar", args = { type = 0, lane = 0 } },
        { time = 40, type = "SpawnCar", args = { type = 1, lane = 1 } },
        { time = 60, type = "SpawnCar", args = { type = 0, lane = 0 } },
        { time = 80, type = "SpawnCar", args = { type = 1, lane = 1 } },
        { time = 100, type = "SpawnCar", args = { type = 0, lane = 0 } },
        { time = 120, type = "SpawnCar", args = { type = 1, lane = 1 } },
        { time = 140, type = "SpawnCar", args = { type = 0, lane = 0 } },
        { time = 160, type = "SpawnCar", args = { type = 1, lane = 1 } },
        */
    },
    Street =
    {
        { time = 0, type = "SpawnEnemy", args = { type = "Enemy0", y = -120.0f, } },
        { time = 400, type = "SpawnEnemy", args = { type = "Enemy0", y = -200.0f, } },
        { time = 400, type = "SpawnEnemy", args = { type = "Enemy0", y = -140.0f, } },
        { time = 1000, type = "SpawnEnemy", args = { type = "Enemy0", y = -210.0f, } },
        { time = 1000, type = "SpawnEnemy", args = { type = "Enemy1", y = -150.0f, } },
        { time = 1000, type = "SpawnEnemy", args = { type = "Enemy0", y = -250.0f, } },
        { time = 1400, type = "SpawnEnemy", args = { type = "Enemy0", y = -210.0f, } },
        { time = 1400, type = "SpawnEnemy", args = { type = "Enemy0", y = -150.0f, } },
        { time = 1400, type = "SpawnEnemy", args = { type = "Enemy0", y = -250.0f, } },
        { time = 2000, type = "SpawnEnemy", args = { type = "Enemy0", y = -210.0f, } },
        { time = 2000, type = "SpawnEnemy", args = { type = "Enemy0", y = -150.0f, } },
        { time = 2500, type = "SpawnEnemy", args = { type = "Enemy1", y = -210.0f, } },
        { time = 2500, type = "SpawnEnemy", args = { type = "Enemy0", y = -150.0f, } },
        { time = 2500, type = "SpawnEnemy", args = { type = "Enemy0", y = -150.0f, } },
        { time = 2500, type = "SpawnEnemy", args = { type = "Enemy1", y = -250.0f, } },
        { time = 3100, type = "SpawnEnemy", args = { type = "Enemy1", y = -210.0f, } },
        { time = 3300, type = "SpawnEnemy", args = { type = "Enemy0", y = -150.0f, } },
        { time = 3300, type = "SpawnEnemy", args = { type = "Enemy0", y = -150.0f, } },
        { time = 3300, type = "SpawnEnemy", args = { type = "Enemy1", y = -250.0f, } },
        { time = 3900, type = "SpawnEnemy", args = { type = "Enemy1", y = -210.0f, } },
        { time = 3900, type = "SpawnEnemy", args = { type = "Enemy1", y = -150.0f, } },
        { time = 3900, type = "SpawnEnemy", args = { type = "Enemy1", y = -250.0f, } },
        { time = 4500, type = "StageEnd", args = { } },
    },
};

global MakeStage = function(world, name)
{
    assert(?world);
    assert(?name);
    assert(?StageConfig[name]);

    local Stage = table();

    Stage.world = world;
    Stage.name = name;
    Stage.config = StageConfig[name];
    Stage.camera_start = v2(0.0f);
    Stage.progress_last = -1;

    Stage.Start = function()
    {
        .camera_start = g_game.state.cam.pos;
    };

    Stage.GetProgress = function()
    {
        local cam = g_game.state.cam;
        local ofs = cam.pos - .camera_start;
        local len = safe_length(ofs);

        // DEBUG: incrementing for now
        //if ( !?.progress_debug ) { .progress_debug = 0; }
        //.progress_debug += 1;
        //return .progress_debug;

        // TODO: camera update handling, position doesnt reflect in stage
        g_dump.progress = len.Int();

        return len.Int();
    };

    Stage.Update = function()
    {
        local progress = .GetProgress();

        foreach (entry in .config)
        {
            if (entry.time <= .progress_last)
            {
                continue;
            }

            if (entry.time > progress)
            {
                continue;
            }

            local fun = this["Process" + entry.type];
            local args = entry.args;
            assert(?fun);
            assert(?args);
            this:fun(args);
        };

        .progress_last = progress;

        g_dump.progress = progress;
    };

    Stage.ProcessSpawnEnemy = function(args)
    {
        local base = g_game.state.cam.pos + v2(700.0f, 0.0f);
        local pos = v3(base.x, base.y + args.y, 0.0f);
        local enemy = MakeFighter(.world, pos, args.type);
        local ai = MakeFighterAI(enemy, args.type);

        .world.AddLifeRow(enemy);
    };

    Stage.ProcessStageEnd = function(args)
    {
        .stageEnd = MakeStageEnd(.world);
    };

    Stage.ProcessSpawnCar = function(args)
    {
        local base = g_game.state.cam.pos + v2(700.0f, 0.0f);
        local pos = v3(base.x, base.y + args.y, 0.0f);
        local car = MakeCar(.world, pos, args.type, args.lane);
        local ai = MakeCarAI(car);

        .world.AddLifeRow(car);
    };

    return Stage;
};

global MakeStageEnd = function(world)
{
    local StageEnd = table();
    StageEnd.world = world;

    StageEnd.Update = function()
    {
        while (true)
        {
            local finished = true;
            foreach (e in .world.entities)
            {
                if (e.type == "Enemy")
                {
                    finished = false;
                    break;
                }
            }
            if (finished)
            {
                sleep(1.0f);
                .End();
            }

            sleep(1.0f);
        }
    };

    StageEnd.Release = function()
    {
        threadKill(.threadId);
    };

    StageEnd.End = function()
    {
        g_game.state.End();
    };

    StageEnd.threadId = StageEnd:thread(StageEnd.Update);
    return StageEnd;
};
