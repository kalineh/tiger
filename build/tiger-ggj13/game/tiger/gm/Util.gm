global BubbleSortLess = function(a, b)
{
	return a < b;
};

global BubbleSortTable = function(t, less_comparison_obj, less_comparison_fun)
{
	local count = tableCount(t);

	while (true)
	{
		local newcount = 0;

		for (i = 1; i < count; i += 1)
		{
			local a = t[i - 0];
			local b = t[i - 1];

			assert(?a);
			assert(?b);

			if (less_comparison_obj:less_comparison_fun(a, b))
			{
				t[i - 0] = b;
				t[i - 1] = a;
				
				newcount = i;
				break;
			}
		}

		if (newcount == 0)
		{
			break;
		}
	}
};

global MakeDelayedCall = function(delay, fun, arg, obj)
{
	local helper = {
		delay = delay,
		fun = fun,
		arg = arg,
		obj = obj,
	};

	local t = helper:thread(function() {
		local fun = .fun;
		local arg = .arg;
		local obj = .obj;
		sleep(.delay);
		obj:fun(arg);
	});

	return t;
};

global StringTableValues = function(table_)
{
    local s = "";
    local i = 0;

    foreach (k and v in table_)
    {
        s += v;

        i += 1;

        if (i < tableCount(table_))
        {
            s += ",";
        }
    }

    return s;
};

global SleepFrames = function(frames)
{
    for (i = 0; i < frames; i += 1)
    {
        yield();
    }
};
