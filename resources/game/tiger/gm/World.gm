
global MakeWorld = function(stage_config)
{
	local World = 
	{
		entities = table(),
		liferow = table(),
		deathrow = table(),
		player = null,
		tickready = false,
		ticklist = table(),
		messages = table(),
        stage_config = stage_config,
        frame = 0,

		queryResults = array(),

		enemySettings = tableDuplicate(DefaultEnemySettings),
	};

	World.Gui = function()
	{
		Gui.Begin("World", g_core.screenDimen.x - 400, g_core.screenDimen.y - 10 );

		Gui.Separator();

		Gui.End();
	};

    // TODO: disallow this? only allow queue perhaps?
	World.AddEntity = function(entity)
	{
		assert(.entity_addremove_lock == false);	
		.entities[entity] = entity;
	};

	World.AddLifeRow = function(entity)
	{
		.liferow[entity] = entity;
	};

	World.ProcessLifeRow = function()
	{
		foreach (e in .liferow)
		{
			.entities[e] = e;
		}

		.liferow = table();
	};


	World.GetPlayer = function()
	{
		return .player;
	};

	World.FindNearestEntities = function(pos, ignore, count, predicate_obj, predicate_fun)
	{
		local results = table();

		foreach (e in .entities)
		{
			if (e == ignore)
			{
				continue;
			}

			if (predicate_obj:predicate_fun(e))
			{
				results[] = e;
			}
		}

		local comparison = {
			pos = pos,
			fun = function(a, b)
			{
				local a_dist = length(.pos - a.pos);
				local b_dist = length(.pos - b.pos);
				return a_dist < b_dist;
			}
		};

		BubbleSortTable(results, comparison, comparison.fun);

		local final = table();
		foreach (e in results)
		{
			final[] = e;

			count -= 1;
			if (count < 0)
			{
				break;
			}
		}

		return final;
	};

	World.CountEntityType = function(type, ignore)
	{
		local count = 0;

		foreach (e in .entities)
		{
			if (e != ignore && e.type == type)
			{
				count += 1;
			}
		}

		return count;
	};

	World.IsInBounds = function(coord)
	{
		return .IsInBoundsXY(coord.x, coord.y);
	};

	World.IsInBoundsXY = function(x, y)
	{
		if (x < 0.0f) { return false; }
		if (y < 0.0f) { return false; }
		if (x >= .cols.Float()) { return false; }
		if (y >= .rows.Float()) { return false; }

		return true;
	};

	World.AddDeathRow = function(entity)
	{
		.deathrow[] = entity;
	};

	World.ProcessDeathRow = function()
	{
		foreach (e in .deathrow)
		{
			.entities[e] = null;
			e.Release();
		}

		.deathrow = table();
	};

	World.DrawEntities = function()
	{
		Gfx.Enable(Gfx.BLEND);

		foreach (e in .entities)
		{
			e.Draw();
		}
	};

	World.DrawCollision = function()
	{
        // TODO: toggle gui option
        //.collision_manager.DebugDraw();
	};

	World.Update = function()
	{
		while( true )
		{		
			RegisterGui( .Gui, this );
			RegisterDraw( DrawLayers.Scene, .DrawEntities, this);
			RegisterDraw( DrawLayers.Scene_FG, .DrawCollision, this);

            .stage.Update();

            .ProcessLifeRow();

            if (.frame > 0)
            {
                .collision_manager.Collide();
            }

            .ProcessDeathRow();

            .frame += 1;

			yield();
		}
	};

    World.FindNearestPlayer = function(position)
    {
        return .player;
    };

	World.Init = function(player_is_car)
	{	
		.cpp = World();
        .frame = 0;

		.threadId = this:thread(.Update);

		local player_spawn = v3(-500.0f, -200.0f);

        local player_spawn_fun = MakePlayer;
        local player_controller_fun = MakePlayerController;

        if (player_is_car)
        {
            player_spawn_fun = MakePlayerCar;
            player_controller_fun = MakePlayerCarController;
        }

        .collision_manager = MakeCollisionManager();
		.player = player_spawn_fun(this, player_spawn);
        .controller = player_controller_fun(.player);
		.entities[.player] = .player;
        .stage = MakeStage(this, .stage_config);

        // TEST
        .ai = table();
        for (i = 0; i < 0; i += 1)
        {
    		local thug = MakeFighter(this, player_spawn - v3(randfloat(-64.0f, 0.0f), randfloat(32.0f, 64.0f), 0.0f), "Thug");
            .entities[thug] = thug;
            .ai[thug] = MakeFighterAI(thug, "Thug");
        }
	};

	World.Release = function()
	{
		foreach (e in .entities)
		{
			e.Release();
		}

		.cpp = null;

		threadKill(.threadId);
	};
	
	return World;
};
