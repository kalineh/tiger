
local CreateGame = function()
{
	local Game = 
	{
		version = "0.0",
		versionNotes = "Start",

		time = 0.0f,
		showAnimationGui = false,
		showShaderGui = false,
		playMusic = true,

		levelsCompleted = 0,
	};

	Log("Tiger version: " + Game.version + " - " + Game.versionNotes );

	// maximize if fullscreen
	if ( Window.IsFullScreen() )
	{
		Game.dimen = Window.GetMonitorDimen();
	}
	else
	{
		Game.dimen = min( v2(1280.0f, 720.0f), Window.GetDimen() );
	}

	Game.ClearScreen = function()
	{
		Gfx.ClearColor( Gfx.YELLOW, 1.0f );
		Gfx.ClearDepth(1.0);
		Gfx.Clear( Gfx.COLOR_BUFFER_BIT | Gfx.DEPTH_BUFFER_BIT );
	};

	Game.BeginViewport = function()
	{
		Gfx.Viewport( g_core.screenDimen*0.5f - .dimen*0.5f, .dimen );	
	};

	Game.EndViewport = function()
	{
		Gfx.Viewport( v2(0), g_core.screenDimen );
	};

	Game.BeginScreenSpace = function()
	{
		.BeginViewport();
		Gfx.Enable(Gfx.LINE_SMOOTH);
		Gfx.Enable(Gfx.BLEND);
		Gfx.Disable(Gfx.DEPTH_TEST);

		.camScreen.Begin();
	};

	Game.EndScreenSpace = function()
	{
		.camScreen.End();
		.EndViewport();
		Gfx.Disable(Gfx.LINE_SMOOTH);
		Gfx.Disable(Gfx.BLEND);
	};

	Game.Gui = function()
	{
		Gui.Begin("Tiger", g_core.screenDimen.x.Int()-230, g_core.screenDimen.y.Int() - 5);
	
		Gui.Print("Game Time: " + .time );
		Gui.Separator();
		.showAnimationGui = Gui.CheckBox("Show Animation Bank", .showAnimationGui);
		.showShaderGui = Gui.CheckBox("Show Shader Bank", .showShaderGui);
		Gui.Header("States");
		foreach( key and val in .stateFuncs )
		{
			if ( Gui.Button(key) )
			{
				.GotoState(key);
			}
		}

		Gui.Header("Sound Banks");
		foreach( key and val in .showSoundBankGuis )
		{
			.showSoundBankGuis[key] = Gui.CheckBox(key, val);
		}

		Gui.Separator();
		local previous = .playMusic;
		.playMusic = Gui.CheckBox("Enable Music", .playMusic);
		if (!previous && .playMusic)
		{
			global g_ENABLE_MUSIC = true;
			g_game.musicPlayer.Play(g_game.musicPlayer.lastFile, 1.0f);
		}
		if (previous && !.playMusic)
		{
			g_game.musicPlayer.FadeOut(1.0f);
			global g_ENABLE_MUSIC = false;
		}
		
		Gui.End();
	};

	Game._InitAnimationBank = function()
	{
		.animBank = MakeSpriteAnimationBank("game/tiger/gm/AnimationResource.gm");
	};

	Game._InitShaderBank = function()
	{
		local shaderDir = "game/tiger/shader/";

		.shaderBank = MakeShaderBank();
		//.shaderBank.Add("shield", shaderDir + "shield.vp", shaderDir + "shield.fp" );
	};

	Game._InitTextures = function()
	{
		.textures =
		{
			//foo = Texture("game/tiger/img/foo.png"),
		};
	};

	Game.GotoState = function(name)
	{
		fork
		{
			Log("Changing state to: " + name);
			if ( ?.state )
			{
				// need to set this else it would kill itself if caller in TIGER_STATE GROUP
				threadSetGroup( ThreadGroups.MAIN );
	
				.state.Release();
				threadKillGroup( ThreadGroups.TIGER_STATE );
				g_drawManager.Clear();
				sysCollectGarbage(true);
			}

			threadSetGroup( ThreadGroups.TIGER_STATE );

			g_fader.FadeIn( 1.0f, Gfx.WHITE );

			local func = .stateFuncs[name];
			assert(?func);
			.state = func();
		}
	};

	Game.Update = function()
	{
		while( true )
		{
			.time += g_dt;

			RegisterDraw( DrawLayers.Clear, .ClearScreen, this );
			
			// gui
			RegisterGui( .Gui, this );			

			// play sounds/gui
			foreach( key and bank in .soundBanks )
			{
				bank.PlayAllQueued();
				if ( .showSoundBankGuis[key] )
				{
					RegisterGui( bank.Gui, bank );
				}
			}

			if ( .showAnimationGui ) { RegisterGui( .animBank.Gui, .animBank ); }			
			if ( .showShaderGui ) {	RegisterGui( .shaderBank.Gui, .shaderBank ); }

			yield();
		}
	};

	Game._InitCameras = function()
	{
		.camScreen = Cam2d();
		.camScreen.InitScreenSpaceSize(.dimen);
		.camScreen.SetNearFar(v2(-1000.0f, 1000.0f ));
	};

	Game._InitResources = function()
	{
		.res = 
		{
			//some = system.LoadTableFromFile("game/tiger/gm/someresource.gm"),
		};
	};

	Game._InitStates = function()
	{
		.stateFuncs = 
		{
			title = MakeTitleState,
			game = MakeGameState,
		};

		.state = null;

		//.GotoState("title");
		.GotoState("game");
	};

	Game._InitSounds = function()
	{
		.soundBanks = {
			game = MakeSoundBank("game/tiger/gm/SoundResourceGame.gm"),
			shared = MakeSoundBank("game/tiger/gm/SoundResourceShared.gm"),
			title = MakeSoundBank("game/tiger/gm/SoundResourceTitle.gm"),
		};

		// gui options
		.showSoundBankGuis = {};
		foreach( key and val in .soundBanks )
		{
			.showSoundBankGuis[key] = false;
		}
	};

	Game._InitGameComponents = function()
	{
	};

	Game._InitSongs = function()
	{
		.musicPlayer = MakeMusicPlayer();

		.songs = 
		{
			game = 
			{
				"game/tiger/snd/music/tiger.mp3",
				"game/tiger/snd/music/tiger.mp3",
			},

			escape = "game/tiger/snd/music/tiger.mp3",
			title = "game/tiger/snd/music/title.mp3",
		};
	};

	Game.Init = function()
	{	
		Window.SetTitle("Black Tiger");
		system.DoFile("game/tiger/gm/Includes.gm");

		._InitSongs();
		._InitFonts();
		._InitShaderBank();
		._InitTextures();
		._InitCameras();
		._InitResources();
		._InitSounds();
		._InitAnimationBank();

		fork
		{
			._InitGameComponents();
			._InitStates();
		}

		.threadId = this:thread(.Update);
	};

	Game._InitFonts = function()
	{
		.fonts =
		{
			pakenham_25 = Font("common/img/font/pakenham_25.png", 25),
			pakenham_30 = Font("common/img/font/pakenham_30.png", 30),
			zekton_20 = Font("common/img/font/zekton_20.png", 20),
			zekton_25 = Font("common/img/font/zekton_25.png", 25),
			zekton_30 = Font("common/img/font/zekton_30.png", 30),
		};
	};

	Game.Release = function()
	{
		.musicPlayer.Release();
		.musicPlayer = null;

		.shaderBank.Release();
		.shaderBank = null;

		.animBank.Release();
		.animBank = null;

		.textures = null;

		if ( ?.state )
		{
			.state.Release();
		}

		threadKill(.threadId);
	};
	
	Game.Init();
	return Game;
};

global g_game = CreateGame();