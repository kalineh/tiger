global MakeGameState = function()
{
	local State = 
	{
	};

	State.DrawBegin = function()
	{
		g_game.BeginScreenSpace();
	};

	State.DrawEnd = function()
	{
		g_game.EndScreenSpace();
	};

	State.Update = function()
	{
		while( true )
		{		
			RegisterGui(.Gui, this);
			RegisterDraw( DrawLayers.Scene_Begin, .DrawBegin, this );
			RegisterDraw( DrawLayers.Scene_End, .DrawEnd, this );
			yield();
		}
	};

	State.Gui = function()
	{
		Gui.Begin("Game State", g_core.screenDimen.x*0.4f, g_core.screenDimen.y-10.0f );
		
		Gui.End();
	};

	State.OnGameOver = function()
	{
		fork
		{
			// TODO: stop music?

			// play end sound
			g_game.soundBanks["game"].Play("gameOver");

			// draw params
			local params = {};
			params.tex = Texture("game/tiger/img/callout_fail.png");
			params.yOffset = 400.0f;	
			params.alpha = 0.0f;

			Tween.To( params, 1.0f, {alpha=1.0f, yOffset=0.0f});

			local DrawFunc = function(params)
			{
				g_game.BeginScreenSpace();
				Gfx.BeginDefaultShader();

				// full screen black
				Gfx.Color(Gfx.BLACK, 0.95f*params.alpha);
				Gfx.DrawRect(v2(0.0f), g_game.dimen );

				// draw texture
				local effectiveSize = v2(286.0f,156.0f);
				local effectiveUV = effectiveSize/params.tex.Dimen();
				Gfx.Color(Gfx.WHITE);
				DrawTexture(params.tex, v2(g_game.dimen.x*0.5f-effectiveSize.x*0.5f, g_game.dimen.y*0.5f-effectiveSize.y*0.5f + params.yOffset) );

				Gfx.EndDefaultShader();
				g_game.EndScreenSpace();
			};

			while(true)
			{
				RegisterDraw( DrawLayers.Scene_UI, DrawFunc, null, params);
				yield();
			}
		}
	};

	State.DrawMissionBeginSeq = function(params)
	{
		g_game.BeginScreenSpace();
		Gfx.BeginDefaultShader();

		// full-screen black
		Gfx.Color(Gfx.BLACK, 0.9f*params.alpha);
		Gfx.DrawRect(v2(0.0f), g_game.dimen );

		local tex = params.tex;
		local texDimen = tex.Dimen();
		local texEffectiveRange = v2(409.0f, 356.0f);
		local pos = g_game.dimen*0.5f-texEffectiveRange*0.5f + v2(0.0f,params.yOffset);
		
		// image
		tex.Bind(0);
		Gfx.Color(Gfx.WHITE, params.alpha);
		Gfx.DrawRectTexCoords( pos, texEffectiveRange, v2(0.0f), texEffectiveRange/texDimen );
		tex.Unbind();

		// text
		local font = g_game.fonts["zekton_30"];
		Gfx.Color(Gfx.YELLOW, params.alpha);
		local text = "3";
		local textDimen = font.GetDimen(text);
		font.Print(text,pos+texEffectiveRange*0.5f - textDimen*0.5f -v2(0.0f, 42.0f));
		

		Gfx.EndDefaultShader();
		g_game.EndScreenSpace();
	};

	State._Init = function()
	{	
		.bg = MakeBackground();

		.cam = MakeGameCamera();
		.world = MakeWorld();
		.world.Init(1234);
		.gui = MakeGameGui();

		._InitTextures();
		._InitParticles();

		// force camera to focus player first
		//.cam.TeleportTo(.world.GetPlayer().coord * .world.tilesize);

		.threadId = this:thread(.Update);
	};

	State.EmitParticlesAt = function(particleName, pos, numParticles)
	{
		local particles = .particles[particleName];
		assert(?particles);
		particles.cpp.pos = pos;
		particles.cpp.Emit(numParticles);
	};

	State._InitParticles = function()
	{
		local particlesData =
		{
			smoke = { numParticles=1024, drawLayer=DrawLayers.Scene, file="TIGER_smoke.gm" },
			explosion = { numParticles=1024, file="TIGER_explosion.gm" },
			explosion = { numParticles=1024, file="TIGER_blood.gm" },
			fire = { numParticles=4096, drawLayer=DrawLayers.Scene, file="TIGER_fire.gm" },
		};
		
		.particles = {};

		foreach( name and data in particlesData )
		{
			local particles = MakeParticles2d(data.numParticles);
			particles.LoadFile(data.file);
			particles.drawLayer = select( ?data.drawLayer, data.drawLayer, DrawLayers.Scene_FG);
			particles.useScreenCamera = select(?data.useScreenCamera, data.useScreenCamera, false );

			.particles[name] = particles;
		}
	};

	State._InitTextures = function()
	{
		.textures = 
		{
			//projectileRocket = Texture("game/tiger/img/projectileRocket.png"),
		};
	};

	State.Release = function()
	{
		.bg.Release();
		.bg = null;

		.world.Release();
		.world = null;

		.gui.Release();
		.gui = null;

		.texBG = null;
		.textures = null;
		
		.cam.Release();
		.cam = null;

		threadKill(.threadId);
	};
	
	State._Init();
	return State;
};
