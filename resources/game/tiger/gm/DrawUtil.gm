global DrawTexture = function( tex, pos )
{
	tex.Bind(0);
	Gfx.DrawRectTexCoords(pos, tex.Dimen());
	tex.Unbind();
};

global DrawTextureSection = function( tex, pos, uv0, uv1)
{
	tex.Bind(0);
	Gfx.DrawRectTexCoords(pos, tex.Dimen(). uv0, uv1);
	tex.Unbind();
};

global DrawWindow = function( pos, dimen, colorBG, colorBorder )
{
	if ( !?colorBG ) { colorBG = Gfx.YELLOW; }
	if ( !?colorBorder ) { colorBorder = Gfx.WHITE; }

	local roundedRadius = 10.0f;
	local whiteBorderSize= 7.0f;
	local outsideBgPos = pos - v2(whiteBorderSize);
	local outsideBgDimen = dimen + v2(whiteBorderSize*2.0f);

	local shadowSize = 5.0f;
	Gfx.Color( Gfx.BLACK, 0.08f );
	Gfx.DrawRectRounded( outsideBgPos - v2(shadowSize), outsideBgDimen + v2(shadowSize*2.0f), roundedRadius*1.5f );

	// border
	Gfx.Color( colorBorder );
	Gfx.DrawRectRounded( outsideBgPos, outsideBgDimen, roundedRadius );

	// black border outside
	Gfx.SetLineWidth(3.0f);
	Gfx.Color(Gfx.BLACK );
	Gfx.DrawRectRoundedWire( outsideBgPos, outsideBgDimen, roundedRadius  );
	
	// bg
	Gfx.Color( colorBG );
	Gfx.DrawRectRounded( pos, dimen, roundedRadius*0.5f );

	// black border inside
	Gfx.SetLineWidth(1.0f);
	Gfx.Color(Gfx.BLACK);
	Gfx.DrawRectRoundedWire( pos, dimen, roundedRadius*0.5f );
};

global DrawToolTip = function( pos, dimen, title, colorBg, colorTitle )
{
	if ( !?colorBg ) { colorBg = v3(236.0f/255.0f); }
	if ( !?colorTitle ) { colorTitle = v3(202.0f/255.0f); }

	// title header
	local font = g_game.fonts["zekton_25"];
	local fontHeight = font.GetHeight();
	local fontWidth = font.GetWidth(title);

	local roundedRadius = 5.0f;
	local titleHeight = fontHeight + 5.0f;

	Gfx.SetLineWidth(1.0f);

	// shadow
	local shadowSize = 4.0f;
	Gfx.Color( Gfx.BLACK, 0.06f );
	Gfx.DrawRectRounded( pos - v2(shadowSize), dimen+v2(shadowSize*2.0f), roundedRadius*1.5f );


	// top
	Gfx.Color(colorTitle);
	Gfx.DrawRectRoundedTop( pos + v2(0.0f,dimen.y-titleHeight), v2(dimen.x, titleHeight), roundedRadius );
	Gfx.DrawRectRoundedTopWire( pos + v2(0.0f,dimen.y-titleHeight), v2(dimen.x, titleHeight), roundedRadius );

	// bottom
	Gfx.Color(colorBg);
	Gfx.DrawRectRoundedBot( pos, dimen - v2(0.0f, titleHeight), roundedRadius );
	Gfx.DrawRectRoundedBotWire( pos, dimen - v2(0.0f, titleHeight), roundedRadius );

	// title text
	local headerPaddingRight = 8.0f;
	local headerPadding = (titleHeight -fontHeight)*0.5f;
	Gfx.Color(Gfx.WHITE);
	font.Print(title, pos + v2(headerPadding + dimen.x - fontWidth - headerPaddingRight, dimen.y-headerPadding));
};

global DrawCrossHair = function(center, radius)
{
	local reticleLen = radius*0.6f;

	Gfx.Color(Gfx.BLACK);

	Gfx.SetLineWidth(3.0f);
	Gfx.Enable(Gfx.LINE_SMOOTH);
	Gfx.DrawLine( center + v2(reticleLen,0.0f), center + v2(radius,0.0f) );
	Gfx.DrawLine( center + v2(-reticleLen,0.0f), center + v2(-radius,0.0f) );
	Gfx.DrawLine( center + v2(0.0f,reticleLen), center + v2(0.0f, radius) );
	Gfx.DrawLine( center + v2(0.0f,-reticleLen), center + v2(0.0f,-radius) );

	Gfx.DrawCircleWire( center, radius );
	Gfx.DrawCircle( center, 3.0f );
	Gfx.Color(Gfx.WHITE);
	Gfx.DrawCircleWire( center, 3.0f );

	Gfx.Disable(Gfx.LINE_SMOOTH);
};

global DrawNotifyText = function( text, pos, color )
{
	local font = g_game.fonts["zekton_30"];
	local textDimen = font.GetDimen(text);

	local params =
	{
		text = text,
		pos = pos + v2(textDimen.x*-0.5f,textDimen.y*0.5f),
		color = color,
		alpha = 1.0f,
	};

	Tween.To(params, 3.0f, {pos=params.pos+v2(0.0f, 35.0f), alpha = 0.0f});

	fork
	{
		local _DrawText = function(params)
		{
			local font = g_game.fonts["zekton_30"];

			Gfx.BeginDefaultShader();
			Gfx.Enable(Gfx.BLEND);
			Gfx.Color( params.color, params.alpha );
			font.Print( params.text, params.pos );
			Gfx.EndDefaultShader();
		};

		while(params.alpha > 0.01f )
		{
			RegisterDraw( DrawLayers.Scene_UI, _DrawText, null, params );
			yield();
		}
	}
};

global DrawAnimation = function( animBank, animName, pos )
{
	local animation = MakeSpriteAnimation(animBank, animName);

	fork
	{
		while(!animation.IsFinished())
		{
			local drawPos = pos-animation.animData.tileSize * 0.5f;			

			RegisterDraw
			( 
				DrawLayers.Scene, 
				animation.Draw, animation, 
				drawPos
			);

			yield();
		}
	}
};